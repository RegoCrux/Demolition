#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3603
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Demolition.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Dev")]
	public partial class DemolitionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertDemo(Demo instance);
    partial void UpdateDemo(Demo instance);
    partial void DeleteDemo(Demo instance);
    partial void InsertIndustry(Industry instance);
    partial void UpdateIndustry(Industry instance);
    partial void DeleteIndustry(Industry instance);
    partial void InsertInstance(Instance instance);
    partial void UpdateInstance(Instance instance);
    partial void DeleteInstance(Instance instance);
    partial void InsertApp(App instance);
    partial void UpdateApp(App instance);
    partial void DeleteApp(App instance);
    partial void InsertJob(Job instance);
    partial void UpdateJob(Job instance);
    partial void DeleteJob(Job instance);
    #endregion
		
		public DemolitionDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DemolitionDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DemolitionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DemolitionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DemolitionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DemolitionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Demo> Demos
		{
			get
			{
				return this.GetTable<Demo>();
			}
		}
		
		public System.Data.Linq.Table<Industry> Industries
		{
			get
			{
				return this.GetTable<Industry>();
			}
		}
		
		public System.Data.Linq.Table<Instance> Instances
		{
			get
			{
				return this.GetTable<Instance>();
			}
		}
		
		public System.Data.Linq.Table<App> Apps
		{
			get
			{
				return this.GetTable<App>();
			}
		}
		
		public System.Data.Linq.Table<Job> Jobs
		{
			get
			{
				return this.GetTable<Job>();
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Email;
		
		private string _Name;
		
		private string _Password;
		
		private string _Role;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private int _Id;
		
		private EntitySet<Demo> _Demos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleChanging(string value);
    partial void OnRoleChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnUpdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedAtChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public User()
		{
			this._Demos = new EntitySet<Demo>(new Action<Demo>(this.attach_Demos), new Action<Demo>(this.detach_Demos));
			OnCreated();
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Role", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[Column(Storage="_Updated", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedAt
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Association(Name="User_Demo", Storage="_Demos", ThisKey="Id", OtherKey="UserID")]
		public EntitySet<Demo> Demos
		{
			get
			{
				return this._Demos;
			}
			set
			{
				this._Demos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Demos(Demo entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Demos(Demo entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.Demos")]
	public partial class Demo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private System.Nullable<int> _UserID;
		
		private string _State;
		
		private System.Nullable<int> _IndustryID;
		
		private System.DateTime _Updated;
		
		private System.Nullable<System.DateTime> _Created;
		
		private int _Id;
		
		private string _EC2Id;
		
		private EntitySet<Instance> _Instances;
		
		private EntityRef<User> _User;
		
		private EntityRef<Industry> _Industry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnIndustryIDChanging(System.Nullable<int> value);
    partial void OnIndustryIDChanged();
    partial void OnUpdatedAtChanging(System.DateTime value);
    partial void OnUpdatedAtChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEC2IdChanging(string value);
    partial void OnEC2IdChanged();
    #endregion
		
		public Demo()
		{
			this._Instances = new EntitySet<Instance>(new Action<Instance>(this.attach_Instances), new Action<Instance>(this.detach_Instances));
			this._User = default(EntityRef<User>);
			this._Industry = default(EntityRef<Industry>);
			OnCreated();
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="NVarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_IndustryID", DbType="Int")]
		public System.Nullable<int> IndustryID
		{
			get
			{
				return this._IndustryID;
			}
			set
			{
				if ((this._IndustryID != value))
				{
					if (this._Industry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIndustryIDChanging(value);
					this.SendPropertyChanging();
					this._IndustryID = value;
					this.SendPropertyChanged("IndustryID");
					this.OnIndustryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedAt
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_EC2Id", DbType="NVarChar(200)")]
		public string EC2Id
		{
			get
			{
				return this._EC2Id;
			}
			set
			{
				if ((this._EC2Id != value))
				{
					this.OnEC2IdChanging(value);
					this.SendPropertyChanging();
					this._EC2Id = value;
					this.SendPropertyChanged("EC2Id");
					this.OnEC2IdChanged();
				}
			}
		}
		
		[Association(Name="Demo_Instance", Storage="_Instances", ThisKey="Id", OtherKey="DemoID")]
		public EntitySet<Instance> Instances
		{
			get
			{
				return this._Instances;
			}
			set
			{
				this._Instances.Assign(value);
			}
		}
		
		[Association(Name="User_Demo", Storage="_User", ThisKey="UserID", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Demos.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Demos.Add(this);
						this._UserID = value.Id;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Industry_Demo", Storage="_Industry", ThisKey="IndustryID", OtherKey="Id", IsForeignKey=true)]
		public Industry Industry
		{
			get
			{
				return this._Industry.Entity;
			}
			set
			{
				Industry previousValue = this._Industry.Entity;
				if (((previousValue != value) 
							|| (this._Industry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Industry.Entity = null;
						previousValue.Demos.Remove(this);
					}
					this._Industry.Entity = value;
					if ((value != null))
					{
						value.Demos.Add(this);
						this._IndustryID = value.Id;
					}
					else
					{
						this._IndustryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Industry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Instances(Instance entity)
		{
			this.SendPropertyChanging();
			entity.Demo = this;
		}
		
		private void detach_Instances(Instance entity)
		{
			this.SendPropertyChanging();
			entity.Demo = null;
		}
	}
	
	[Table(Name="dbo.Industries")]
	public partial class Industry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.DateTime _Updated;
		
		private int _Id;
		
		private EntitySet<Demo> _Demos;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnUpdatedAtChanging(System.DateTime value);
    partial void OnUpdatedAtChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public Industry()
		{
			this._Demos = new EntitySet<Demo>(new Action<Demo>(this.attach_Demos), new Action<Demo>(this.detach_Demos));
			OnCreated();
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[Column(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedAt
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Association(Name="Industry_Demo", Storage="_Demos", ThisKey="Id", OtherKey="IndustryID")]
		public EntitySet<Demo> Demos
		{
			get
			{
				return this._Demos;
			}
			set
			{
				this._Demos.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Demos(Demo entity)
		{
			this.SendPropertyChanging();
			entity.Industry = this;
		}
		
		private void detach_Demos(Demo entity)
		{
			this.SendPropertyChanging();
			entity.Industry = null;
		}
	}
	
	[Table(Name="dbo.Instances")]
	public partial class Instance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EC2State;
		
		private string _DataState;
		
		private System.Nullable<int> _AppID;
		
		private System.Nullable<int> _DemoID;
		
		private System.Nullable<System.DateTime> _Created;
		
		private System.DateTime _Updated;
		
		private int _Id;
		
		private string _EC2Url;
		
		private EntityRef<Demo> _Demo;
		
		private EntityRef<App> _App;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEC2StateChanging(string value);
    partial void OnEC2StateChanged();
    partial void OnDataStateChanging(string value);
    partial void OnDataStateChanged();
    partial void OnAppIDChanging(System.Nullable<int> value);
    partial void OnAppIDChanged();
    partial void OnDemoIDChanging(System.Nullable<int> value);
    partial void OnDemoIDChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnUpdatedAtChanging(System.DateTime value);
    partial void OnUpdatedAtChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnEC2UrlChanging(string value);
    partial void OnEC2UrlChanged();
    #endregion
		
		public Instance()
		{
			this._Demo = default(EntityRef<Demo>);
			this._App = default(EntityRef<App>);
			OnCreated();
		}
		
		[Column(Storage="_EC2State", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EC2State
		{
			get
			{
				return this._EC2State;
			}
			set
			{
				if ((this._EC2State != value))
				{
					this.OnEC2StateChanging(value);
					this.SendPropertyChanging();
					this._EC2State = value;
					this.SendPropertyChanged("EC2State");
					this.OnEC2StateChanged();
				}
			}
		}
		
		[Column(Storage="_DataState", DbType="NVarChar(50)")]
		public string DataState
		{
			get
			{
				return this._DataState;
			}
			set
			{
				if ((this._DataState != value))
				{
					this.OnDataStateChanging(value);
					this.SendPropertyChanging();
					this._DataState = value;
					this.SendPropertyChanged("DataState");
					this.OnDataStateChanged();
				}
			}
		}
		
		[Column(Storage="_AppID", DbType="Int")]
		public System.Nullable<int> AppID
		{
			get
			{
				return this._AppID;
			}
			set
			{
				if ((this._AppID != value))
				{
					if (this._App.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAppIDChanging(value);
					this.SendPropertyChanging();
					this._AppID = value;
					this.SendPropertyChanged("AppID");
					this.OnAppIDChanged();
				}
			}
		}
		
		[Column(Storage="_DemoID", DbType="Int")]
		public System.Nullable<int> DemoID
		{
			get
			{
				return this._DemoID;
			}
			set
			{
				if ((this._DemoID != value))
				{
					if (this._Demo.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDemoIDChanging(value);
					this.SendPropertyChanging();
					this._DemoID = value;
					this.SendPropertyChanged("DemoID");
					this.OnDemoIDChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[Column(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedAt
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_EC2Url", DbType="NVarChar(MAX)")]
		public string EC2Url
		{
			get
			{
				return this._EC2Url;
			}
			set
			{
				if ((this._EC2Url != value))
				{
					this.OnEC2UrlChanging(value);
					this.SendPropertyChanging();
					this._EC2Url = value;
					this.SendPropertyChanged("EC2Url");
					this.OnEC2UrlChanged();
				}
			}
		}
		
		[Association(Name="Demo_Instance", Storage="_Demo", ThisKey="DemoID", OtherKey="Id", IsForeignKey=true)]
		public Demo Demo
		{
			get
			{
				return this._Demo.Entity;
			}
			set
			{
				Demo previousValue = this._Demo.Entity;
				if (((previousValue != value) 
							|| (this._Demo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Demo.Entity = null;
						previousValue.Instances.Remove(this);
					}
					this._Demo.Entity = value;
					if ((value != null))
					{
						value.Instances.Add(this);
						this._DemoID = value.Id;
					}
					else
					{
						this._DemoID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Demo");
				}
			}
		}
		
		[Association(Name="App_Instance", Storage="_App", ThisKey="AppID", OtherKey="Id", IsForeignKey=true)]
		public App App
		{
			get
			{
				return this._App.Entity;
			}
			set
			{
				App previousValue = this._App.Entity;
				if (((previousValue != value) 
							|| (this._App.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._App.Entity = null;
						previousValue.Instances.Remove(this);
					}
					this._App.Entity = value;
					if ((value != null))
					{
						value.Instances.Add(this);
						this._AppID = value.Id;
					}
					else
					{
						this._AppID = default(Nullable<int>);
					}
					this.SendPropertyChanged("App");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Apps")]
	public partial class App : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _DLLs;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Updated;
		
		private int _Id;
		
		private EntitySet<Instance> _Instances;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnCreatedAtChanging(System.DateTime value);
    partial void OnCreatedAtChanged();
    partial void OnUpdatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedAtChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public App()
		{
			this._Instances = new EntitySet<Instance>(new Action<Instance>(this.attach_Instances), new Action<Instance>(this.detach_Instances));
			OnCreated();
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_DLLs", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._DLLs;
			}
			set
			{
				if ((this._DLLs != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._DLLs = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedAt
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[Column(Storage="_Updated", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedAt
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedAtChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("UpdatedAt");
					this.OnUpdatedAtChanged();
				}
			}
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Association(Name="App_Instance", Storage="_Instances", ThisKey="Id", OtherKey="AppID")]
		public EntitySet<Instance> Instances
		{
			get
			{
				return this._Instances;
			}
			set
			{
				this._Instances.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Instances(Instance entity)
		{
			this.SendPropertyChanging();
			entity.App = this;
		}
		
		private void detach_Instances(Instance entity)
		{
			this.SendPropertyChanging();
			entity.App = null;
		}
	}
	
	[Table(Name="dbo.Jobs")]
	public partial class Job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _CreatedAt;
		
		private string _Payload;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedAtChanged();
    partial void OnPayloadChanging(string value);
    partial void OnPayloadChanged();
    #endregion
		
		public Job()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedAt", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}
		
		[Column(Storage="_Payload", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Payload
		{
			get
			{
				return this._Payload;
			}
			set
			{
				if ((this._Payload != value))
				{
					this.OnPayloadChanging(value);
					this.SendPropertyChanging();
					this._Payload = value;
					this.SendPropertyChanged("Payload");
					this.OnPayloadChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
